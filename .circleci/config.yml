version: 2.1
orbs:
  node: circleci/node@5.0.0
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-eks: circleci/aws-eks@2.1.1
  kubernetes: circleci/kubernetes@1.3
jobs:
  test:
    executor:
      name: node/default
      tag: "16.10"
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          command: yarn lint
          name: yarn lint
      - run:
          command: yarn format:check
          name: yarn format:check
      - run:
          command: yarn test
          name: yarn test
      - run:
          command: yarn test:cov
          name: yarn test:cov
      - run:
          command: yarn test:e2e
          name: yarn test:e2e
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
  preprod-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          demo
        type: string
    steps:
      - checkout
      - kubernetes/install
      - run:
          command: |
              sudo apt-get update -y
              sudo apt-get install awscli groff -y
              pip install awscli
              sudo curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.12/2020-11-02/bin/linux/amd64/kubectl
              sudo chmod +x ./kubectl
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
              aws configure set default.region ${AWS_REGION}
              aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
              aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
              aws eks --region ${AWS_REGION} update-kubeconfig --name demo
          name: Auth
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/nonprod-deployment.yaml"
          get-rollout-status: false
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/nonprod-svc.yaml"
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/aws-auth.yaml"
  prod-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          demo
        type: string
    steps:
      - checkout
      - kubernetes/install
      - run:
          command: |
              sudo apt-get update -y
              sudo apt-get install awscli groff -y
              pip install awscli
              sudo curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.17.12/2020-11-02/bin/linux/amd64/kubectl
              sudo chmod +x ./kubectl
              mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
              echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
              aws configure set default.region ${AWS_REGION}
              aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
              aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
              aws eks --region ${AWS_REGION} update-kubeconfig --name demo
          name: Auth
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/prod-deployment.yaml"
          get-rollout-status: false
          #resource-name: deployment/a15-deployment
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/prod-svc.yaml"
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/aws-auth.yaml"
workflows:
  node-tests:
    jobs:
      - test:
          filters:
            branches:
             only: 
               - develop
               - master
      # Envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_ECR_ACCOUNT_URL
      - aws-ecr/build-and-push-image:
          filters:
            branches:
             only: 
               - develop
               - master
          repo: hello
          tag: "latest"
          dockerfile: Dockerfile
          path: .
          requires:
            - test
      - preprod-deployment:
          filters:
            branches:
             only: 
               - develop
          cluster-name: demo
          requires:
            - test
            - aws-ecr/build-and-push-image
      - prod-deployment:
          filters:
            branches:
             only: 
               - master
          cluster-name: demo
          requires:
            - test
            - aws-ecr/build-and-push-image